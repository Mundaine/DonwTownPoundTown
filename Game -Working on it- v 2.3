import java.io.IOException;
import java.util.Random;

public class Game {

	private static int playerOneSpace = 1;
	private static int playerTwoSpace = 1;
	private static int playerThreeSpace = 1;
	private static int playerFourSpace = 1;
	private static int playerFiveSpace = 1;
	private static int playerSixSpace = 1;
	private static int playerSevenSpace = 1;
	private static int playerEightSpace = 1;
	// Class level as variables are utilized in playerTurnSwitch() and
	// diceRoller()
	// As name implies, these are beginning spaces for each possible player.

	static GenerateBoard boardPrint = new GenerateBoard();
	// class level because it is needed inside play() and playerOptionsOnTurn()

	/*
	 * This method allows for the game to run. Method manages each individual
	 * class. For Players, asks how many are going to play, then uses that
	 * variable to call for methods in player game to assign a name and a piece.
	 * Calls Board class to print a visual representation of the board. Calls
	 * the method bankctioneer. Creates a for loop that will run for each player
	 * available, loop calls playerTurnSwitch() method.
	 * 
	 */
	public void play() throws IOException {
		System.out.println("Welcome to the Monopoly Application! \nYou're in for a world of fun!");

		int numberOfPlayers = ConsoleUI.promptForInt("\nHow many players are going to play? 2-8", 2, 8);
		String[] playerNames = new String[numberOfPlayers];
		String[] playerPieces = new String[numberOfPlayers];

		Player playerNameAndPiece = new Player();
		for (int i = 0; i < numberOfPlayers; i++) {
			playerNames[i] = playerNameAndPiece.player();
			playerPieces[i] = playerNameAndPiece.playerPieceSelect(numberOfPlayers);
		}

		System.out.println("\nThe visual representation of the board shall now be presented:");
		System.out.println();
		GenerateBoard boardPrint = new GenerateBoard();
		boardPrint.generateBoard();

		int firstPlayer = playerMovementOrder(numberOfPlayers);

		// theBankctioneer(numberOfPlayers);

		for (int countForPlayers = firstPlayer; countForPlayers <= numberOfPlayers; countForPlayers++) {
			if (countForPlayers == 1) {
				playerTurnSwitch(playerNames[0], countForPlayers, playerPieces[0]);
			} else if (countForPlayers == 2) {
				playerTurnSwitch(playerNames[1], countForPlayers, playerPieces[1]);
			} else if (countForPlayers == 3) {
				playerTurnSwitch(playerNames[2], countForPlayers, playerPieces[2]);
			} else if (countForPlayers == 4) {
				playerTurnSwitch(playerNames[3], countForPlayers, playerPieces[3]);
			} else if (countForPlayers == 5) {
				playerTurnSwitch(playerNames[4], countForPlayers, playerPieces[4]);
			} else if (countForPlayers == 6) {
				playerTurnSwitch(playerNames[5], countForPlayers, playerPieces[5]);
			} else if (countForPlayers == 7) {
				playerTurnSwitch(playerNames[6], countForPlayers, playerPieces[6]);
			} else if (countForPlayers == 8) {
				playerTurnSwitch(playerNames[7], countForPlayers, playerPieces[7]);
			}

			if (countForPlayers == numberOfPlayers)
				countForPlayers = 0;
		}
	}

	/*
	 * Method bancktioneer establishes Monopoly rule that one player will be
	 * assigned as banker and auctioneer. If there are more than 5 players,
	 * selected player can choose to be either one of the two, or both.
	 * 
	 */
	public static void theBankctioneer(int numberOfPlayers) throws IOException {
		System.out.println(
				"\nPlease select one of the players to be the Banker. \nPlease make certain to select an appropriate Banker who will also double as a good Auctioneer.");
		int banker = ConsoleUI.promptForInt("Select the number of the Player to be both the Banker and the Auctioneer.",
				1, numberOfPlayers);
		// print out the name and piece of the player
		String bankAndAuction = "\nPlayer " + banker + " will be both the Banker and the Auctioneer.";
		System.out.println(bankAndAuction);
		int auctioneer = 0;
		boolean auctionerEqualBanker = false;

		if (numberOfPlayers > 5) {

			boolean bankAuction = ConsoleUI.promptForBool(
					"There are more than 5 players, does the selected Banker want to act as Banker and Auctioner? Y/N",
					"Y", "N");

			if (bankAuction == true)
				System.out.println(bankAndAuction);

			else if (bankAuction == false) {

				auctioneer = ConsoleUI.promptForInt("Enter the number of the player who shall be the Auctioneer", 1,
						numberOfPlayers);
				while (auctionerEqualBanker != true) {

					if (auctioneer == banker) {
						System.out.println(
								"It has been previously stated that the Banker and the Auctioneer would be different players");

						auctionerEqualBanker = ConsoleUI.promptForBool(
								"Would you like to make the Auctioneer and the Banker the same person? Y/N", "Y", "N");

						if (auctionerEqualBanker != true) {
							auctioneer = ConsoleUI.promptForInt(
									"Enter the number of the player who shall be the Auctioneer", 1, numberOfPlayers);
						} else if (auctionerEqualBanker) {
							System.out.println(bankAndAuction);
						}
					}
					if (auctioneer != banker) {
						auctionerEqualBanker = true;
						System.out.println("Player " + auctioneer + " will be the Auctioneer.");
					}

				}
			}
		}
	}

	/*
	 * Method prints a menu of options to help each player keep track of various
	 * things in-game.
	 * 
	 */
	public static void playerOptionsOnTurn(String playerName, int playerNumber, String playerPiece) throws IOException {
		System.out.println("\nA menu containing available, helpful options shall now be presented.\n");
		System.out.println();
		String[] optionsMenu = new String[6];
		optionsMenu[0] = "Check Available Property";
		optionsMenu[1] = "Check Amount of Money Available";
		optionsMenu[2] = "Check Available Cards";
		optionsMenu[3] = "Check Which Piece Player Is";
		optionsMenu[4] = "Check Visual Representation of Board";
		optionsMenu[5] = "Check Player Location";

		boolean repeatMenu = true;

		while (repeatMenu) {

			int userAns = ConsoleUI.promptForMenuSelection(optionsMenu, true);

			if (userAns == 1) {
				System.out.println("Available property for player " + playerName + " is");
				System.out.println();
				// make unique arrayList for player's property, money, etc.
			} else if (userAns == 2) {
				System.out.println("Amount of money currently available by player " + playerName + " is a total of:");
				System.out.println();
				// the money for the player
			} else if (userAns == 3) {
				System.out.println("The available cards player " + playerName + " has are:");
				System.out.println();
				// print arrayList of cards available, if arrayList.size()==0,
				// print are there are no available cards for player
			} else if (userAns == 4) {
				System.out.println("The piece that player " + playerName + " is shall now be displayed:");
				System.out.println("Player is piece: " + playerPiece);
			} else if (userAns == 5) {
				boardPrint.generateBoard();
			} else if (userAns == 6) {
				int playerCheck = ConsoleUI.promptForInt(
						"For which player number would you like to check the player's location?", 1, playerNumber);
				if (playerCheck == 1) {
					System.out.println("Player 1 is at: " + playerOneSpace);
				} else if (playerCheck == 2) {
					System.out.println("Player 2 is at: " + playerTwoSpace);
				} else if (playerCheck == 3) {
					System.out.println("Player 3 is at: " + playerThreeSpace);
				} else if (playerCheck == 4) {
					System.out.println("Player 4 is at: " + playerFourSpace);
				} else if (playerCheck == 5) {
					System.out.println("Player 5 is at: " + playerFiveSpace);
				} else if (playerCheck == 6) {
					System.out.println("Player 6 is at: " + playerSixSpace);
				} else if (playerCheck == 7) {
					System.out.println("Player 7 is at: " + playerSevenSpace);
				} else if (playerCheck == 8) {
					System.out.println("Player 8 is at: " + playerEightSpace);
				}
			}
			repeatMenu = ConsoleUI.promptForBool("\nWould you like to see the menu again? Yes/No", "Yes", "No");
		}
	}

	/*
	 * Method makes movement and playerOptionsOnTurn happen at the same time for
	 * each player. The variable inside the parameter is taken from the play()
	 * method to know which player's turn is.
	 */
	public static void playerTurnSwitch(String playerName, int count, String playerPiece) throws IOException {

		for (int i = 0; i < count; i++) {
		}

		if (count == 1) {

			System.out.println("It's player 1, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerOneSpace, count);

		} else if (count == 2) {
			System.out.println("It's player 2, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerTwoSpace, count);

		} else if (count == 3) {
			System.out.println("It's player 3, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerThreeSpace, count);

		} else if (count == 4) {
			System.out.println("It's player 4, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerFourSpace, count);

		} else if (count == 5) {
			System.out.println("It's player 5, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerFiveSpace, count);

		} else if (count == 6) {
			System.out.println("It's player 6, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerSixSpace, count);

		} else if (count == 7) {
			System.out.println("It's player 7, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerSevenSpace, count);

		} else if (count == 8) {
			System.out.println("It's player 8, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count, playerPiece);
			playerMovement(playerName, playerEightSpace, count);
		}

	}

	static Random rd = new Random();

	/*
	 * Random used class wise as it's required in two methods. Method makes
	 * player movement possible through the use of two random integers
	 * generators from 1 to 6 to simulate dice. Sum of both dice is added to a
	 * variable that keeps track of each player's space in the board.
	 * 
	 */
	public static void playerMovement(String playerName, int playerMove, int whichPlayer) {
		System.out.println("Player " + playerName + " is currently at space " + playerMove + ".");
		Random rd = new Random();
		int dice1 = rd.nextInt(6) + 1;
		int dice2 = rd.nextInt(6) + 1;
		int totalMovementSpace = dice1 + dice2;

		System.out.println("Dice one: " + dice1 + "\nDice two: " + dice2);
		System.out.println("The player will move a total of " + totalMovementSpace + " spaces.");

		while (totalMovementSpace > 0) {
			if (playerMove == 41) {
				playerMove = 1;
			}
			playerMove += 1;
			totalMovementSpace--;
		}
		if (whichPlayer == 1) {
			playerOneSpace = playerMove;
		} else if (whichPlayer == 2) {
			playerTwoSpace = playerMove;
		} else if (whichPlayer == 3) {
			playerThreeSpace = playerMove;
		} else if (whichPlayer == 4) {
			playerFourSpace = playerMove;
		} else if (whichPlayer == 5) {
			playerFiveSpace = playerMove;
		} else if (whichPlayer == 6) {
			playerSixSpace = playerMove;
		} else if (whichPlayer == 7) {
			playerSevenSpace = playerMove;
		} else if (whichPlayer == 8) {
			playerEightSpace = playerMove;
		}

		System.out.println("Player " + playerName + " is now at space " + playerMove + ".");
	}

	/*
	 * Method created in order to have the first player to start moving
	 * randomly.\ selected. Simulates the purpose of having players roll the
	 * dice to see who shall be the highest number to select that player to
	 * start the game.
	 * 
	 */
	public int playerMovementOrder(int playerNum) {
		int firstPlayer = rd.nextInt(playerNum) + 1;
		System.out.println("First player to start moving will be player: " + firstPlayer);
		return firstPlayer;
	}

	/*
	 * This method calls for both the community and chance cards. Then, it does
	 * what the community or chance card states.
	 */
	public void playerSpaceLocation(int playerSpace) {
		Chance chanceCard = new Chance();
		CommunityChest communityCard = new CommunityChest();
		if (playerSpace == 23) {
			System.out.println("\nYou have landed on a chance card space! You will now be handed a chance card ");

		}

		if (playerSpace == 8) {
			System.out.println("\nYou have landed on a chance card space! You will now be handed a chance card ");
			chanceCard.getCard();
		}

		if (playerSpace == 37) {
			System.out.println("\nYou have landed on a chance card space! You will now be handed a chance card ");
			chanceCard.getCard();
		}

		if (playerSpace == 34) {
			System.out.println(
					"\nYou have landed on community chest space! You will now be handed a community chest card ");
			communityCard.getChest();
		}

		if (playerSpace == 18) {
			System.out.println(
					"\nYou have landed on community chest space! You will now be handed a community chest card ");
			chanceCard.getCard();
		}
		if (playerSpace == 3) {
			System.out.println(
					"\nYou have landed on community chest space! You will now be handed a community chest card ");
			chanceCard.getCard();
		}

	}

	public void playerBankruptcy() {
	}

	/*
	 * 
	 * properties cards chance / chest etc have rules properly implement7ed, can
	 * add or modify in here call player have players get their pieces (through
	 * player pieces) * if the space of the player has options have menu for the
	 * options of the place the player lands on i.e. buy, pay rent or tax,
	 * obtain a card, upgrade property, do not print if there is nothing
	 * property if player declares bankruptcy his properties get auctioned (deal
	 * with mortgage) if player lands on property and doesn't buy, property gets
	 * auctioned when choosing to auction, process can not stop until process is
	 * finished
	 * 
	 * 
	 * 
	 * end game if all but one player declares bankruptcy
	 */

}

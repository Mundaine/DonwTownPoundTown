import java.io.IOException;
import java.util.Random;

public class Game {

	private static int playerOneSpace = 1;
	private static int playerTwoSpace = 1;
	private static int playerThreeSpace = 1;
	private static int playerFourSpace = 1;
	private static int playerFiveSpace = 1;
	private static int playerSixSpace = 1;
	private static int playerSevenSpace = 1;
	private static int playerEightSpace = 1;
	// class level as it's utilized in playerTurnSwitch() and diceRoller()

	static GenerateBoard boardPrint = new GenerateBoard();
	// class level because it is needed inside play() and playerOptionsOnTurn()

	public void play() throws IOException {
		System.out.println("Welcome to the Monopoly Application! \nYou're in for a world of fun!");

		int numberOfPlayers = ConsoleUI.promptForInt("\nHow many players are going to play? 2-8", 2, 8);
		String[] playerNames = new String[numberOfPlayers];
		String[] playerPieces = new String[numberOfPlayers];

		Player playerNameAndPiece = new Player();
		for (int i = 0; i < numberOfPlayers; i++) {
			playerNames[i] = playerNameAndPiece.player();
			playerNameAndPiece.playerPieceSelect(numberOfPlayers);
		}

		System.out.println("\nThe visual representation of the board shall now be presented:");
		System.out.println();
		GenerateBoard boardPrint = new GenerateBoard();
		boardPrint.generateBoard();

		theBankctioneer(numberOfPlayers);

		for (int countForPlayers = 1; countForPlayers <= numberOfPlayers; countForPlayers++) {
			if (countForPlayers == 1) {
				playerTurnSwitch(playerNames[0], countForPlayers);
			} else if (countForPlayers == 2) {
				playerTurnSwitch(playerNames[1], countForPlayers);
			} else if (countForPlayers == 3) {
				playerTurnSwitch(playerNames[2], countForPlayers);
			} else if (countForPlayers == 4) {
				playerTurnSwitch(playerNames[3], countForPlayers);
			} else if (countForPlayers == 5) {
				playerTurnSwitch(playerNames[4], countForPlayers);
			} else if (countForPlayers == 6) {
				playerTurnSwitch(playerNames[5], countForPlayers);
			} else if (countForPlayers == 7) {
				playerTurnSwitch(playerNames[6], countForPlayers);
			} else if (countForPlayers == 8) {
				playerTurnSwitch(playerNames[7], countForPlayers);
			}

			if (countForPlayers == numberOfPlayers)
				countForPlayers = 0;
		}
	}

	public static void theBankctioneer(int numberOfPlayers) throws IOException {
		System.out.println(
				"\nPlease select one of the players to be the Banker. \nPlease make certain to select an appropriate Banker who will also double as a good Auctioneer.");
		int banker = ConsoleUI.promptForInt("Select the number of the Player to be both the Banker and the Auctioneer.",
				1, numberOfPlayers);
		// print out the name and piece of the player
		String bankAndAuction = "\nPlayer " + banker + " will be both the Banker and the Auctioneer.";
		System.out.println(bankAndAuction);
		int auctioneer = 0;
		boolean auctionerEqualBanker = false;

		if (numberOfPlayers > 5) {

			boolean bankAuction = ConsoleUI.promptForBool(
					"There are more than 5 players, does the selected Banker want to act as Banker and Auctioner? Y/N",
					"Y", "N");

			if (bankAuction == true)
				System.out.println(bankAndAuction);

			else if (bankAuction == false) {

				auctioneer = ConsoleUI.promptForInt("Enter the number of the player who shall be the Auctioneer", 1,
						numberOfPlayers);
				while (auctionerEqualBanker != true) {

					if (auctioneer == banker) {
						System.out.println(
								"It has been previously stated that the Banker and the Auctioneer would be different players");

						auctionerEqualBanker = ConsoleUI.promptForBool(
								"Would you like to make the Auctioneer and the Banker the same person? Y/N", "Y", "N");

						if (auctionerEqualBanker != true) {
							auctioneer = ConsoleUI.promptForInt(
									"Enter the number of the player who shall be the Auctioneer", 1, numberOfPlayers);
						} else if (auctionerEqualBanker) {
							System.out.println(bankAndAuction);
						}
					}
					if (auctioneer != banker) {
						auctionerEqualBanker = true;
						System.out.println("Player " + auctioneer + " will be the Auctioneer.");
					}

				}
			}
		}
	}

	public static void playerOptionsOnTurn(String playerName, int playerNumber) throws IOException {
		System.out.println("\nA menu containing available, helpful options shall now be presented.\n");
		System.out.println(
				"If any player desires to check in which place they reside at, it will be stated shortly.\nPlease be patient");
		System.out.println();
		String[] optionsMenu = new String[6];
		optionsMenu[0] = "Check Available Property";
		optionsMenu[1] = "Check Amount of Money Available";
		optionsMenu[2] = "Check Available Cards";
		optionsMenu[3] = "Check Which Piece Player Is";
		optionsMenu[4] = "Check Visual Representation of Board";
		optionsMenu[5] = "Check Player Location";

		boolean repeatMenu = true;

		while (repeatMenu) {

			int userAns = ConsoleUI.promptForMenuSelection(optionsMenu, true);

			if (userAns == 1) {
				System.out.println("Available property for player " + playerName + " is");
				System.out.println();
				// make unique arrayList for player's property, money, etc.
			} else if (userAns == 2) {
				System.out.println("Amount of money currently available by player " + playerName + " is a total of:");
				System.out.println();
				// the sum of the arrayList money for the player
			} else if (userAns == 3) {
				System.out.println("The available cards player " + playerName + " has are:");
				System.out.println();
				// print arrayList of cards available, if arrayList.size()==0,
				// print are there are no available cards for player
			} else if (userAns == 4) {
				System.out.println("The space that the player " + playerName + " currently resides is:");
				System.out.println();
				// player space
			} else if (userAns == 5) {
				System.out.println("The piece that player " + playerName + " is shall now be displayed:");
				// ... I guess this will be sorted out through playerPieces
				// return playerPieceX
			} else if (userAns == 5) {
				boardPrint.generateBoard();
			} else if (userAns == 6) {
				int playerCheck = ConsoleUI.promptForInt(
						"For which player number would you like to check the player's location?", 1, playerNumber);
				if (playerCheck == 1) {
					System.out.println("Player 1 is at: " + playerOneSpace);
				} else if (playerCheck == 2) {
					System.out.println("Player 2 is at: " + playerTwoSpace);
				} else if (playerCheck == 3) {
					System.out.println("Player 3 is at: " + playerThreeSpace);
				} else if (playerCheck == 4) {
					System.out.println("Player 4 is at: " + playerFourSpace);
				} else if (playerCheck == 5) {
					System.out.println("Player 5 is at: " + playerFiveSpace);
				} else if (playerCheck == 6) {
					System.out.println("Player 6 is at: " + playerSixSpace);
				} else if (playerCheck == 7) {
					System.out.println("Player 7 is at: " + playerSevenSpace);
				} else if (playerCheck == 8) {
					System.out.println("Player 8 is at: " + playerEightSpace);
				}
			}
			repeatMenu = ConsoleUI.promptForBool("\nWould you like to see the menu again? Yes/No", "Yes", "No");
		}
	}

	public static void playerTurnSwitch(String playerName, int count) throws IOException {

		if (count == 1) {

			System.out.println("It's player 1, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerOneSpace, count);

		} else if (count == 2) {
			System.out.println("It's player 2, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerTwoSpace, count);

		} else if (count == 3) {
			System.out.println("It's player 3, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerThreeSpace, count);

		} else if (count == 4) {
			System.out.println("It's player 4, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerFourSpace, count);

		} else if (count == 5) {
			System.out.println("It's player 5, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerFiveSpace, count);

		} else if (count == 6) {
			System.out.println("It's player 6, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerSixSpace, count);

		} else if (count == 7) {
			System.out.println("It's player 7, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerSevenSpace, count);

		} else if (count == 8) {
			System.out.println("It's player 8, " + playerName + "'s turn");
			playerOptionsOnTurn(playerName, count);
			playerMovement(playerName, playerEightSpace, count);
		}

	}

	public static void playerMovement(String playerName, int playerMove, int whichPlayer) {
		System.out.println("Player " + playerName + " is currently at space " + playerMove + ".");
		Random rd = new Random();
		int dice1 = rd.nextInt(6) + 1;
		int dice2 = rd.nextInt(6) + 1;
		int totalMovementSpace = dice1 + dice2;

		System.out.println("Dice one: " + dice1 + "\nDice two: " + dice2);
		System.out.println("The player will move a total of " + totalMovementSpace + " spaces.");

		while (totalMovementSpace > 0) {
			if (playerMove == 41) {
				playerMove = 1;
			}
			playerMove += 1;
			totalMovementSpace--;
		}
		if (whichPlayer == 1) {
			playerOneSpace = playerMove;
		} else if (whichPlayer == 2) {
			playerTwoSpace = playerMove;
		} else if (whichPlayer == 3) {
			playerThreeSpace = playerMove;
		} else if (whichPlayer == 4) {
			playerFourSpace = playerMove;
		} else if (whichPlayer == 5) {
			playerFiveSpace = playerMove;
		} else if (whichPlayer == 6) {
			playerSixSpace = playerMove;
		} else if (whichPlayer == 7) {
			playerSevenSpace = playerMove;
		} else if (whichPlayer == 8) {
			playerEightSpace = playerMove;
		}

		System.out.println("Player " + playerName + " is now at space " + playerMove + ".");
	}

	public void playerSpaceLocation(int playerSpace) {

		if (playerSpace == 26) {
			System.out.println("\nYou have landed on a chance card space! You will now be handed a chance card ");
			// get a chance card for the player
		}

	}

	public void playerBankruptcy() {
	}

	/*
	 * 
	 * properties cards chance / chest etc have rules properly implement7ed, can
	 * add or modify in here call player have players get their pieces (through
	 * player pieces) * if the space of the player has options have menu for the
	 * options of the place the player lands on i.e. buy, pay rent or tax,
	 * obtain a card, upgrade property, do not print if there is nothing
	 * property if player declares bankruptcy his properties get auctioned (deal
	 * with mortgage) if player lands on property and doesn't buy, property gets
	 * auctioned when choosing to auction, process can not stop until process is
	 * finished
	 * 
	 * 
	 * 
	 * end game if all but one player declares bankruptcy
	 */

}

import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

public class Game {
	static Random rd = new Random();

	public static void main(String[] args) throws IOException {

		Player playerNumbers = new Player();
		playerNumbers.countPlayers();
		System.out.println("\nThe visual representation of the board shall now be presented:");
		System.out.println();
		GenerateBoard boardPrint = new GenerateBoard();
		boardPrint.generateBoard();
		// ArrayList player1 = new ArrayList();
		// ArrayList player2 = new ArrayList();
		// ArrayList player3 = new ArrayList();
		// ArrayList player4 = new ArrayList();
		// ArrayList player5 = new ArrayList();
		// ArrayList player6 = new ArrayList();
		// ArrayList player7 = new ArrayList();
		// ArrayList player8 = new ArrayList();
		theBankctioneer(7);
	}

	public static void theBankctioneer(int playerNumbers) throws IOException {
		System.out.println(
				"Please select one of the players to be the banker, good Banker who will also make a good Auctioneer.");
		int banker = ConsoleUI.promptForInt("Select the player number to be the Banker / Auctioneer.", 1, 8);
		// print out the name and piece of the player
		System.out.println("Player " + banker + " will be the Banker.");
		int auctioneer = 0;
		boolean auctionerEqualBanker = true;
		if (playerNumbers > 5) {

			boolean bankAuction = ConsoleUI.promptForBool(
					"There are more than 5 players, does the selected Banker want to act as Banker and Auctioner? Y/N",
					"Y", "N");

			if (bankAuction == false) {
				auctioneer = ConsoleUI.promptForInt("Enter the number of the player who shall be the Auctioneer", 1, 8);
				while (auctionerEqualBanker) {
					
					if(auctioneer == banker)
					System.out.println(
							"It has been previously stated that the Banker and the Auctioneer would be different players");
					auctionerEqualBanker = ConsoleUI.promptForBool(
							"Would you like to make the Auctioneer and the Banker the same person? Y/N", "Y", "N");
					auctioneer = ConsoleUI.promptForInt("Enter the number of the player who shall be the Auctioneer", 1,
							8);
					
				}
			}
			System.out.println("Player "+ auctioneer +" will be the Auctioneer.");

		}
	}

	public void playerMovement() {
		// ask user if user wants to check available information : property,
		// money, card, what piece they are. where they are
		// perhaps @ beg. turn tell where they @
	}

	public static void diceRoller() {
		int dice1 = rd.nextInt(6) + 1;
		int dice2 = rd.nextInt(6) + 1;
		int totalMovementSpace = dice2 + dice1;
		System.out.println("Dice one: " + dice1 + "\nDice two: " + dice2);
		System.out.println("The player will move a total of " + totalMovementSpace + " spaces.");
		
	}

	public void playerSpaceLocation(ArrayList player) {

		if (player.contains(26)) {
			System.out.println("\nYou have landed on a chance card space! You will now be handed a chance card ");
			// get a chance card for the player
		}

	}

	/*
	 * 
	 * properties cards chance / chest etc have rules properly implemented, can
	 * add or modify in here call player have players get their pieces (through
	 * player pieces) allow players to move have menu for players to move check
	 * if the space of the player has options have menu for the options of the
	 * place the player lands on i.e. buy, pay rent or tax, obtain a card,
	 * upgrade property, do not print if there is nothing available allow other
	 * player to move (if statement with a playerCount that will increase to
	 * allow players to move after another player already moved) keep track of
	 * money per player, where the player each, player property have options
	 * menu at the beginning of every player movement: check money, check their
	 * properties, view board, move, sell or utilize get out of jail card,
	 * declare bankruptcy if player declares bankruptcy his properties get
	 * auctioned (deal with mortgage) if player lands on property and doesn't
	 * buy, property gets auctioned when choosing to auction, process can not
	 * stop until process is finished
	 * 
	 * 
	 * 
	 * end game if all but one player declares bankruptcy
	 */

}
